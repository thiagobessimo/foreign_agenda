{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/middlewares/joi/index.ts","webpack:///external \"@hapi/joi\"","webpack:///./src/middlewares/joi/customValidators.ts","webpack:///./src/middlewares/utils/fs.ts","webpack:///./src/middlewares/utils/entries.ts","webpack:///external \"express\"","webpack:///./src/middlewares/common/index.ts","webpack:///external \"morgan\"","webpack:///external \"cors\"","webpack:///./src/middlewares/localGit/index.ts","webpack:///../netlify-cms-lib-util/src/APIUtils.ts","webpack:///external \"what-the-diff\"","webpack:///external \"simple-git/promise\"","webpack:///external \"async-mutex\"","webpack:///external \"crypto\"","webpack:///./src/middlewares/localFs/index.ts","webpack:///./src/logger.ts","webpack:///external \"winston\"","webpack:///./src/middlewares.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","allowedActions","requiredString","string","required","requiredNumber","number","requiredBool","bool","collection","slug","defaultSchema","path","defaultParams","branch","asset","content","encoding","valid","dataFile","raw","newPath","optional","params","when","switch","is","then","allow","keys","folder","extension","depth","files","array","items","label","id","cmsLabelPrefix","entry","dataFiles","assets","options","collectionName","commitMessage","useWorkflow","status","xor","newStatus","mediaFolder","paths","min","otherwise","forbidden","action","joi","schema","req","res","next","error","validate","body","allowUnknown","details","message","map","join","json","pathTraversal","repoPath","extend","type","base","messages","helpers","startsWith","errors","listFiles","async","dir","dirents","readdir","withFileTypes","Promise","all","dirent","isDirectory","filter","f","endsWith","concat","e","listRepoFiles","substr","length","writeFile","filePath","mkdir","dirname","recursive","deleteFile","unlink","catch","moveFile","from","to","rename","move","sourceDir","destDir","allFiles","file","replace","getUpdateDate","stat","mtime","Date","sha256","buffer","createHash","update","digest","normalizePath","entriesFromFiles","readFile","data","toString","readMediaFile","basename","registerCommonMiddlewares","app","logger","stream","write","debug","String","trim","use","limit","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","a","Buffer","every","forEach","isBranchExists","includes","getDiffs","source","dest","rawDiff","diff","parse","oldPath","newFile","binary","test","validateRepo","silent","checkIsRepo","Error","getSchema","localGitMiddleware","mutex","withTimeout","Mutex","release","acquire","repo","publish_modes","payload","entries","cmsBranches","result","b","CMS_BRANCH_PREFIX","contentKeyFromBranch","parseContentKey","contentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","labelToStatus","updatedAt","reduce","unpublishedEntry","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","mediaFiles","mediaFile","JSON","stringify","registerMiddleware","resolve","process","env","GIT_REPO_DIRECTORY","cwd","post","info","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","getLabelPrefix","labelPrefix","isCMSLabel","index","indexOf","substring","localFsMiddleware","combine","colorize","simple","format","createLogger","level","transports","Console","createOptions","logLevel","registerLocalGit","opts","registerLocalFs"],"mappings":"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","file":"middlewares.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import express from 'express';\nimport Joi from '@hapi/joi';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'deleteFiles',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport const defaultSchema = ({ path = requiredString } = {}) => {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const dataFile = Joi.object({\n    slug: requiredString,\n    path,\n    raw: requiredString,\n    newPath: path.optional(),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            cmsLabelPrefix: Joi.string().optional(),\n            entry: dataFile, // entry is kept for backwards compatibility\n            dataFiles: Joi.array().items(dataFile),\n            assets: Joi.array()\n              .items(asset)\n              .required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .xor('entry', 'dataFiles')\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFiles',\n        then: defaultParams\n          .keys({\n            paths: Joi.array()\n              .items(path)\n              .min(1)\n              .required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n};\n\nexport const joi = (schema: Joi.Schema) => (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n) => {\n  const { error } = schema.validate(req.body, { allowUnknown: true });\n  if (error) {\n    const { details } = error;\n    const message = details.map(i => i.message).join(',');\n    res.status(422).json({ error: message });\n  } else {\n    next();\n  }\n};\n","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport const pathTraversal = (repoPath: string) =>\n  Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n","import path from 'path';\nimport { promises as fs } from 'fs';\n\nconst listFiles = async (dir: string, extension: string, depth: number): Promise<string[]> => {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map(dirent => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n};\n\nexport const listRepoFiles = async (\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) => {\n  const files = await listFiles(path.join(repoPath, folder), extension, depth);\n  return files.map(f => f.substr(repoPath.length + 1));\n};\n\nexport const writeFile = async (filePath: string, content: Buffer | string) => {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n};\n\nexport const deleteFile = async (repoPath: string, filePath: string) => {\n  await fs.unlink(path.join(repoPath, filePath)).catch(() => undefined);\n};\n\nconst moveFile = async (from: string, to: string) => {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n};\n\nexport const move = async (from: string, to: string) => {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n};\n\nexport const getUpdateDate = async (repoPath: string, filePath: string) => {\n  return fs\n    .stat(path.join(repoPath, filePath))\n    .then(stat => stat.mtime)\n    .catch(() => new Date());\n};\n","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nconst sha256 = (buffer: Buffer) => {\n  return crypto\n    .createHash('sha256')\n    .update(buffer)\n    .digest('hex');\n};\n\n// normalize windows os path format\nconst normalizePath = (path: string) => path.replace(/\\\\/g, '/');\n\nexport const entriesFromFiles = async (\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) => {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n};\n\nexport const readMediaFile = async (repoPath: string, file: string) => {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n};\n","module.exports = require(\"express\");","import winston from 'winston';\nimport express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nexport type Options = {\n  logger: winston.Logger;\n};\n\nexport const registerCommonMiddlewares = (app: express.Express, options: Options) => {\n  const { logger } = options;\n  const stream = {\n    write: (message: string) => {\n      logger.debug(String(message).trim());\n    },\n  };\n  app.use(morgan('combined', { stream }));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n};\n","module.exports = require(\"morgan\");","module.exports = require(\"cors\");","import winston from 'winston';\nimport express from 'express';\nimport path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'netlify-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\nimport { defaultSchema, joi } from '../joi';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  DataFile,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  DeleteFilesParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\n// eslint-disable-next-line import/default\nimport simpleGit from 'simple-git/promise';\nimport { Mutex, withTimeout } from 'async-mutex';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move, deleteFile, getUpdateDate } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nconst commit = async (git: simpleGit.SimpleGit, commitMessage: string) => {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    // setting the value to a string passes name=value\n    // any other value passes just the key\n    '--no-verify': null,\n    '--no-gpg-sign': null,\n  });\n};\n\nconst getCurrentBranch = async (git: simpleGit.SimpleGit) => {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n};\n\nconst runOnBranch = async <T>(git: simpleGit.SimpleGit, branch: string, func: () => Promise<T>) => {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n};\n\nconst branchDescription = (branch: string) => `branch.${branch}.description`;\n\ntype GitOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nconst commitEntry = async (\n  git: simpleGit.SimpleGit,\n  repoPath: string,\n  dataFiles: DataFile[],\n  assets: Asset[],\n  commitMessage: string,\n) => {\n  // save entry content\n  await Promise.all(\n    dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n  );\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (dataFiles.every(dataFile => dataFile.newPath)) {\n    dataFiles.forEach(async dataFile => {\n      await move(path.join(repoPath, dataFile.path), path.join(repoPath, dataFile.newPath!));\n    });\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n};\n\nconst rebase = async (git: simpleGit.SimpleGit, branch: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst merge = async (git: simpleGit.SimpleGit, from: string, to: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst isBranchExists = async (git: simpleGit.SimpleGit, branch: string) => {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n};\n\nconst getDiffs = async (git: simpleGit.SimpleGit, source: string, dest: string) => {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n};\n\nexport const validateRepo = async ({ repoPath }: { repoPath: string }) => {\n  const git = simpleGit(repoPath).silent(false);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n};\n\nexport const getSchema = ({ repoPath }: { repoPath: string }) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\nexport const localGitMiddleware = ({ repoPath, logger }: GitOptions) => {\n  const git = simpleGit(repoPath).silent(false);\n\n  // we can only perform a single git operation at any given time\n  const mutex = withTimeout(new Mutex(), 3000, new Error('Request timed out'));\n\n  return async function(req: express.Request, res: express.Response) {\n    let release;\n    try {\n      release = await mutex.acquire();\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          // eslint-disable-next-line @typescript-eslint/camelcase\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug, cmsLabelPrefix } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim(), cmsLabelPrefix || '');\n            const updatedAt =\n              diffs.length >= 0\n                ? await runOnBranch(git, cmsBranch, async () => {\n                    const dates = await Promise.all(\n                      diffs.map(({ newPath }) => getUpdateDate(repoPath, newPath)),\n                    );\n                    return dates.reduce((a, b) => {\n                      return a > b ? a : b;\n                    });\n                  })\n                : new Date();\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n              updatedAt,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            cmsLabelPrefix,\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n            options,\n          } = body.params as PersistEntryParams;\n\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n            });\n          } else {\n            const slug = dataFiles[0].slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status, cmsLabelPrefix || '');\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const {\n            collection,\n            slug,\n            newStatus,\n            cmsLabelPrefix,\n          } = body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus, cmsLabelPrefix || '');\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n            const serializedFiles = await Promise.all(\n              files.map(file => readMediaFile(repoPath, file)),\n            );\n            return serializedFiles;\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await deleteFile(repoPath, filePath);\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const {\n            paths,\n            options: { commitMessage },\n          } = body.params as DeleteFilesParams;\n          await runOnBranch(git, branch, async () => {\n            await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    } finally {\n      release && release();\n    }\n  };\n};\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport const registerMiddleware = async (app: express.Express, options: Options) => {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath, logger }));\n  logger.info(`Netlify CMS Git Proxy Server configured with ${repoPath}`);\n};\n","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Netlify CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Netlify CMS.';\n\nconst DEFAULT_NETLIFY_CMS_LABEL_PREFIX = 'netlify-cms/';\nconst getLabelPrefix = (labelPrefix: string) => labelPrefix || DEFAULT_NETLIFY_CMS_LABEL_PREFIX;\n\nexport const isCMSLabel = (label: string, labelPrefix: string) =>\n  label.startsWith(getLabelPrefix(labelPrefix));\nexport const labelToStatus = (label: string, labelPrefix: string) =>\n  label.substr(getLabelPrefix(labelPrefix).length);\nexport const statusToLabel = (status: string, labelPrefix: string) =>\n  `${getLabelPrefix(labelPrefix)}${status}`;\n\nexport const generateContentKey = (collectionName: string, slug: string) =>\n  `${collectionName}/${slug}`;\n\nexport const parseContentKey = (contentKey: string) => {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.substr(0, index), slug: contentKey.substr(index + 1) };\n};\n\nexport const contentKeyFromBranch = (branch: string) => {\n  return branch.substring(`${CMS_BRANCH_PREFIX}/`.length);\n};\n\nexport const branchFromContentKey = (contentKey: string) => {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n};\n","module.exports = require(\"what-the-diff\");","module.exports = require(\"simple-git/promise\");","module.exports = require(\"async-mutex\");","module.exports = require(\"crypto\");","import winston from 'winston';\nimport express from 'express';\nimport path from 'path';\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  DeleteFilesParams,\n  DataFile,\n} from '../types';\nimport { listRepoFiles, deleteFile, writeFile, move } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\ntype FsOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nexport const localFsMiddleware = ({ repoPath, logger }: FsOptions) => {\n  return async function(req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n          } = body.params as PersistEntryParams;\n          await Promise.all(\n            dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n          );\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (dataFiles.every(dataFile => dataFile.newPath)) {\n            dataFiles.forEach(async dataFile => {\n              await move(\n                path.join(repoPath, dataFile.path),\n                path.join(repoPath, dataFile.newPath!),\n              );\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n          const mediaFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const { paths } = body.params as DeleteFilesParams;\n          await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n};\n\nexport const getSchema = ({ repoPath }: { repoPath: string }) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport const registerMiddleware = async (app: express.Express, options: Options) => {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath, logger }));\n  logger.info(`Netlify CMS File System Proxy Server configured with ${repoPath}`);\n};\n","import winston from 'winston';\n\nconst { combine, colorize, simple } = winston.format;\n\ntype LogOptions = {\n  level: string;\n};\n\nexport const createLogger = ({ level }: LogOptions) => {\n  return winston.createLogger({\n    level,\n    format: combine(colorize(), simple()),\n    transports: [new winston.transports.Console()],\n  });\n};\n","module.exports = require(\"winston\");","import express from 'express';\nimport { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as localGit } from './middlewares/localGit';\nimport { registerMiddleware as localFs } from './middlewares/localFs';\nimport { createLogger } from './logger';\n\ntype Options = {\n  logLevel?: string;\n};\n\nconst createOptions = (options: Options) => {\n  return {\n    logger: createLogger({ level: options.logLevel || 'info' }),\n  };\n};\n\nexport const registerLocalGit = async (app: express.Express, options: Options = {}) => {\n  const opts = createOptions(options);\n  registerCommonMiddlewares(app, opts);\n  await localGit(app, opts);\n};\n\nexport const registerLocalFs = async (app: express.Express, options: Options = {}) => {\n  const opts = createOptions(options);\n  registerCommonMiddlewares(app, opts);\n  await localFs(app, opts);\n};\n"],"sourceRoot":""}